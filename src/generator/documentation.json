{
  "AlarmClockService": {
    "Description": "Control the sonos alarms",
    "File": "alarm-clock.service.ts",
    "Methods": {
      "CreateAlarm": {
        "Description": "Create a single alarm, all properties are required",
        "Params": {
          "StartLocalTime": "The start time as hh:mm:ss",
          "Duration": "The duration as hh:mm:ss",
          "Recurrence": "Repeat this alarm on",
          "Enabled": "Alarm enabled after creation",
          "RoomUUID": "The UUID of the speaker you want this alarm for",
          "ProgramURI": "The sound uri",
          "ProgramMetaData": "The sound metadata, can be empty string",
          "PlayMode": "Alarm play mode",
          "Volume": "Volume between 0 and 100",
          "IncludeLinkedZones": "Should grouped players also play the alarm?"
        }
      },
      "DestroyAlarm": {
        "Description": "Delete an alarm",
        "Params": {
          "ID": "The Alarm ID, see ListAndParseAlarms"
        }
      },
      "ListAlarms": {
        "Description": "Get the AlarmList as XML, use ListAndParseAlarms for parsed version"
      },
      "UpdateAlarm": {
        "Description": "Update an alarm, all parameters are required. Use PatchAlarm where you can update a single parameter",
        "Params": {
          "ID": "The ID of the alarm see ListAndParseAlarms",
          "StartLocalTime": "The start time as hh:mm:ss",
          "Duration": "The duration as hh:mm:ss",
          "Recurrence": "Repeat this alarm on",
          "Enabled": "Alarm enabled after creation",
          "RoomUUID": "The UUID of the speaker you want this alarm for",
          "ProgramURI": "The sound uri",
          "ProgramMetaData": "The sound metadata, can be empty string",
          "PlayMode": "Alarm play mode",
          "Volume": "Volume between 0 and 100",
          "IncludeLinkedZones": "Should grouped players also play the alarm?"
        }
      }
    }
  },
  "AudioInService": {
    "Description": "",
    "File": "audio-in.service.ts"
  },
  "AVTransportService": {
    "Description": "Service that controls stuff related to transport (play/pause/next/special urls)",
    "File": "av-transport.service.ts",
    "Methods": {
      "BecomeCoordinatorOfStandaloneGroup": {
        "Description": "Leave the current group and revert to a single player."
      },
      "ConfigureSleepTimer": {
        "Description": "Stop playing after set sleep timer",
        "Special behavior":"Send to non-coordinator returns error code 800",
        "Params": {
          "NewSleepTimerDuration": "Time to stop after, as hh:mm:ss"
        }
      },
      "DelegateGroupCoordinationTo": {
        "Description": "Delegates the coordinator role to another player in the same group ",
        "Special behavior":"Send to non-coordinator has no results - should be avoided.",
        "Params": {
          "NewCoordinator": "uuid of the new coordinator - must be in same group",
          "RejoinGroup": "Should former coordinator rejoin the group?"
        }
      },
      "GetCrossfadeMode": {
        "Description": "Get crossfade mode, 1 for on, 0 for off",
        "Special behavior":"Send to non-coordinator may return wrong value as only the coordinator value in a group"
      },
      "GetCurrentTransportActions": {
        "Description": "Get current transport actions such as Set, Stop, Pause, Play, X_DLNA_SeekTime, Next, X_DLNA_SeekTrackNr",
        "Special behavior":"Send to non-coordinator always returns Stop, Play"
      },
      "GetMediaInfo": {
        "Description": "Get information about the current playing media (queue)"
      },
      "GetPositionInfo": {
        "Description": "Get information about current position (position in queue and time in current song)"
      },
      "GetRemainingSleepTimerDuration": {
        "Description": "Get time left on sleeptimer or empty string",
        "Special behavior":"Send to non-coordinator returns error code 800"
      },
      "GetTransportInfo": {
        "Description": "Get current transport status, speed and state such as PLAYING, STOPPED, PLAYING, PAUSED_PLAYBACK, TRANSITIONING, NO_MEDIA_PRESENT",
        "Special behavior":"Send to non-coordinator always returns PLAYING"
      },
      "GetTransportSettings": {
        "Description": "Get transport settings such as NORMAL, REPEAT_ONE, REPEAT_ALL, SHUFFLE, SHUFFLE_NOREPEAT, SHUFFLE_REPEAT_ONE",
        "Special behavior":"Send to non-coordinator returns the settings of it's queue"
      },
      "Next": {
        "Description": "Go to next song, not always supported - see GetCurrentTransportActions"
      },
      "Pause": {
        "Description": "Pause playback"
      },
      "Play": {
        "Description": "Start playing the set TransportURI",
        "Params": {
          "Speed": "Play speed usually 1, can be a fraction of 1"
        }
      },
      "Previous": {
        "Description": "Go to previous song, not always supported - GetCurrentTransportActions"
      },
      "RemoveAllTracksFromQueue": {
        "Description": "Flashes the SONOS queue. If queue is already empty it throw error 804",
        "Special behavior":"Send to non-coordinator returns error code 800."
      },
      "SaveQueue": {
        "Description": "Saves the current SONOS queue as a SONOS playlist and outputs objectID",
        "Special behavior":"Send to non-coordinator returns error code 800",
        "Params": {
          "Title": "SONOS playlist title"
        }
      },
      "Seek": {
        "Description": "Seek track in queue, time delta or absolute time in song, not always supported - see GetCurrentTransportActions",
        "Special behavior":"Returns error code 701 in case that content does not support Seek or send to non-coordinator",
        "Params": {
          "Unit": "What to seek - either TRACK_NR, REL_TIME, TIME_DELTA, ",
          "Target": "Position of track in queue (start at 1) or hh:mm:ss for REL_TIME or +/-hh:mm:ss for TIME_DELTA"
        }
      },
      "SetAVTransportURI": {
        "Description": "Set the transport URI to a song, a stream, the queue, another player-rincon and a lot more",
        "Special behavior":"If set to another player RINCON, the player is grouped with that one.",
        "Params": {
          "CurrentURI": "The new TransportURI - its a special SONOS format",
          "CurrentURIMetaData": "Track Metadata, see MetadataHelper.GuessTrack to guess based on track uri"
        }
      },
      "SetCrossfadeMode": {
        "Description": "Set crossfade mode off",
        "Special behavior":"Send to non-coordinator returns error code 800. Same for content, which does not support crossfade mode.",
        "Params": {
          "CrossfadeMode": "true for on, false for off"
        }
      },
      "SetPlayMode": {
        "Description": "Set the PlayMode",
        "Special behavior":"Send to non-coordinator returns error code 712. If SONOS queue is not activated returns error code 712.",
        "Params": {
          "NewPlayMode": "PlayMode such as NORMAL, REPEAT_ONE, REPEAT_ALL, SHUFFLE, SHUFFLE_NOREPEAT, SHUFFLE_REPEAT_ONE"
        }
      },
      "SnoozeAlarm": {
        "Description": "Snooze the current alarm for some time.",
        "Params": {
          "Duration": "Snooze time as hh:mm:ss, 10 minutes = 00:10:00"
        }
      },
      "Stop": {
        "Description": "Stop playback"
      }
    }
  },
  "ConnectionManagerService": {
    "Description": "",
    "File": "connection-manager.service.ts"
  },
  "ContentDirectoryService": {
    "Description": "Browse for local content",
    "File": "content-directory.service.ts",
    "Methods": {
      "Browse": {
        "Description": "Browse for content, see BrowseParsed for a better experience.",
        "Params": {
          "ObjectID": "The search query, ['A:ARTIST','A:ALBUMARTIST','A:ALBUM','A:GENRE','A:COMPOSER','A:TRACKS','A:PLAYLISTS'] with optionally ':search+query' behind it.",
          "BrowseFlag": "How to browse",
          "Filter": "Which fields should be returned '*' for all.",
          "StartingIndex": "Paging, where to start",
          "RequestedCount": "Paging, number of items",
          "SortCriteria": "Sort the results based on metadata fields. '+upnp:artist,+dc:title' for sorting on artist then on title."
        }
      }
    }
  },
  "DevicePropertiesService": {
    "Description": "Modify device properties, like led status and stereo pairs - ",
    "File": "device-properties.service.ts",
    "Methods": {
      "CreateStereoPair": {
        "Description": "Create a stereo pair (left, right speakers), right one becomes hidden - only supported by some players",
        "Params": {
          "ChannelMapSet": "example: RINCON_B8E9375831C001400:LF,LF;RINCON_000E58FE3AEA01400:RF,RF"
        }
      },
      "SeparateStereoPair": {
        "Description": "Separate a stereo pair - only supported by some players",
        "Params": {
          "ChannelMapSet": "example: RINCON_B8E9375831C001400:LF,LF;RINCON_000E58FE3AEA01400:RF,RF"
        }
      }
    }
  },
  "GroupManagementService": {
    "Description": "",
    "File": "group-management.service.ts"
  },
  "GroupRenderingControlService": {
    "Description": "Volume related controls for groups. Group volume is the average volume of all players. Snapshot stores the volume ratio between players.",
    "File": "group-rendering-control.service.ts",
    "Methods": {
      "GetGroupMute": {
        "Description": "Get 1 for muted, 0 for un-muted",
        "Special behavior":"Send to non-coordinator returns error code 701"
      },
      "GetGroupVolume": {
        "Description": "Get the group volume.",
        "Special behavior":"Send to non-coordinator returns error code 701"
      },
      "SetGroupMute": {
        "Description": "(Un-/)Mute the entire group",
        "Special behavior":"Send to non-coordinator returns error code 701",
        "Params": {
          "DesiredMute": "True for mute, false for un-mute"
        }
      },
      "SetGroupVolume": {
        "Description": "Change group volume. Players volume will be changed proportionally based on last snapshot",
        "Special behavior":"Send to non-coordinator returns error code 701",
        "Params": {
          "DesiredVolume": "New volume between 0 and 100"
        }
      },
      "SetRelativeGroupVolume": {
        "Description": "Relatively change group volume - returns final group volume. Players volume will be changed proportionally based on last snapshot",
        "Special behavior":"Send to non-coordinator returns error code 701",
        "Params": {
          "Adjustment": "Number between -100 and +100"
        }
      }, 
      "SnapshotGroupVolume": {
        "Description": "Creates a new group volume snapshot,  the volume ratio between all players. It is used by SetGroupVolume and SetRelativeGroupVolume",
        "Special behavior":"Send to non-coordinator returns error code 701"
      }
    }
  },
  "HTControlService" : {
    "Description":"",
    "File":"ht-control.service.ts"
    },
  "MusicServicesService": {
    "Description": "External music services",
    "File": "music-services.service.ts",
    "Methods": {
      "ListAvailableServices": {
        "Description": "Load music service list (xml), see ListAndParseAvailableServices() for parsed version."
      }
    }
  },
  "QPlayService": {
    "Description": "",
    "File": "q-play.service.ts"
  },
  "QueueService": {
    "Description": "Modify and browse queues",
    "File": "queue.service.ts"
  },
  "RenderingControlService": {
    "Description": "Volume related controls",
    "File": "rendering-control.service.ts",
    "EventProperties": {
      "Mute": {
        "Typescript": "ChannelValue<boolean>",
        "IsChannelValue": true
      },
      "Volume": {
        "Typescript": "ChannelValue<number>",
        "IsChannelValue": true
      }
    },
    "Methods": {
      "GetBass": {
        "Description": "Get bass level between -10 and 10"
      },
      "GetEQ": {
        "Description": "Get EQ value (see SetEQ) for different EQTypes - not supported by all devices (is TV related)",
        "Params": {
          "EQType": "EQ type such as DialogLevel, NightMode, SubGain"
        }
      },
      "GetLoudness": {
        "Description": "Get loudness 1 for on, 0 for off",
        "Params": {
          "Channel": "Master"
        }
      },
      "GetTreble": {
        "Description": "Get treble between -10 and 10"
      },
      "GetVolume": {
        "Description": "Get volume between 0 and 100",
        "Params": {
          "Channel": "Master"
        }
      },
      "SetBass": {
        "Description": "Set bass level",
        "Params": {
          "DesiredBass": "between -10 and 10"
        }
      },
      "SetEQ": {
        "Description": "Set EQ value for different types - not supported by all devices (is TV related)",
        "Params": {
          "EQType": "DialogLevel, NightMode, SubGain",
          "DesiredValue": "DialogLevel and NightMode: 0 for off, 1 for on. SubGain between -10 and 10"
        }
      },
      "SetLoudness": {
        "Description": "Set loudness on / off",
        "Params": {
          "DesiredLoudness": "true for on"
        }
      },
      "SetTreble": {
        "Description": "Set treble level",
        "Params": {
          "DesiredTreble": "between -10 and 10"
        }
      }
    }
  },
  "SystemPropertiesService": {
    "Description": "",
    "File": "system-properties.service.ts"
  },
  "VirtualLineInService": {
    "Description": "",
    "File": "virtual-line-in.service.ts"
  },
  "ZoneGroupTopologyService": {
    "Description": "Zone config stuff, eg getting all the configured sonos zones.",
    "File": "zone-group-topology.service.ts",
    "EventProperties": {
      "AvailableSoftwareUpdate": {
        "Typescript": "any"
      },
      "ZoneGroupState": {
        "Typescript": "Array<ZoneGroup>"
      }
    },
    "Methods": {
      "GetZoneGroupAttributes": {
        "Description": "Get information about the current Zone"
      },
      "GetZoneGroupState": {
        "Description": "Get all the Sonos groups, (as XML), see GetParsedZoneGroupState"
      }
    }
  }
}