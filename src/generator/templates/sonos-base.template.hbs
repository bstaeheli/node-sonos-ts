// Automatically generated by service-generator.js, don't change!
import { Guid } from 'guid-typescript';
import debug, { Debugger } from 'debug';

import {
{{#each services}}  {{name}},
{{/each}}
} from './services';

/**
 * SonosDeviceBase is auto-generated to link to all available services of your Sonos Device
 *
 * @export
 * @class SonosDeviceBase
 */
export default class SonosDeviceBase {
  protected readonly host: string;

  protected readonly port: number;

  private debugger?: Debugger;

  protected get debug(): Debugger {
    if (this.debugger === undefined) {
      this.debugger = debug(`sonos:device:${this.host}`);
    }
    return this.debugger;
  }

  protected uuid: string;

  /**
   *Creates an instance of SonosDeviceBase.
   * @param {string} host The IP of the speaker
   * @param {number} [port=1400] The port, always 1400
   * @param {string} [uuid=Guid.create().toString()] The UUID of the speaker like RINCON_macaddres01400, used in some commands.
   * @memberof SonosDeviceBase
   */
  constructor(host: string, port = 1400, uuid: string = Guid.create().toString()) {
    this.host = host;
    this.port = port;
    this.uuid = uuid;
  }

  {{#each services}}
  private {{pName}}: {{name}} | undefined;

  {{#if documentation}}
  /**
    * {{documentation}}
    * will be initialized on first use.
    *
    * @readonly
    * @type -{-{{name}}-}-
    * @memberof SonosDeviceBase
    */
  {{/if}}
  public get {{name}}(): {{name}} {
    if (this.{{pName}} === undefined) this.{{pName}} = new {{name}}(this.host, this.port, this.uuid);
    return this.{{pName}};
  }
  {{#unless @last}}

  {{/unless}}
  {{/each}}

  public async RefreshEventSubscriptions(): Promise<boolean> {
    let result = false;
    {{#each services}}
    if (this.{{pName}} !== undefined) result = await this.{{pName}}.CheckEventListener() || result;
    {{/each}}
    return result;
  }
}
