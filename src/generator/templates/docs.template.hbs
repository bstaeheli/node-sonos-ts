---
layout: default
title: {{svcName}}
parent: Services
grand_parent: Sonos device
---
# {{svcName}}
{: .no_toc }
{{#if docs.Description}}

{{docs.Description}}
{{/if}}

```js
const SonosDevice = require('@svrooij/sonos').SonosDevice
const sonos = new SonosDevice('192.168.x.x')
sonos.{{svcName}}.OneOfTheMethodsBelow({...})
```

All methods that require input expect an object with the specified parameters, even if it only requires one parameter.

1. TOC
{:toc}

---

{{#each parsed.methods}}
### {{name}}
{{#if description}}

{{description}}
{{/if}}
{{#if parameters}}

Input:

| parameter | type | description |
|:----------|:-----|:------------|
{{#each parameters}}
| **{{name}}** | `{{relatedStateVariable.ttype}}` | {{{description}}} |
{{/each}}
{{else}}

No input parameters
{{/if}}
{{#if outParameters}}

Output:

| parameter | type | description |
|:----------|:-----|:------------|
{{#each outParameters}}
| **{{name}}** | `{{relatedStateVariable.ttype}}` | {{{description}}} |
{{/each}}
{{/if}}
{{#if remarks}}

**Remarks** {{remarks}}
{{/if}}

{{/each}}
{{#if parsed.eventProperties}}
## {{svcName}} event

```js
const SonosDevice = require('@svrooij/sonos').SonosDevice
const sonos = new SonosDevice('192.168.x.x')
sonos.{{svcName}}.Events('serviceEvent', (data) => {
  console.log(data);
});
```

The **{{svcName}}** emits events with these properties. Not all properties are emitted everytime.

| parameter | type |
|:----------|:-----|
{{#each parsed.eventProperties}}
| **{{name}}** | `{{{ttype}}}` |
{{/each}}
{{/if}}