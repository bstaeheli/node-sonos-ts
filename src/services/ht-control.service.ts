// Automatically generated by service-generator.js, don't change!
import { BaseService } from './base-service';

export class HTControlService extends BaseService<undefined> {
  readonly serviceNane: string = 'HTControl';
  readonly controlUrl: string = '/HTControl/Control';  
  readonly eventSubUrl: string = '/HTControl/Event';
  readonly scpUrl: string = '/xml/HTControl1.xml';

  // Actions
  CommitLearnedIRCodes(input: { Name: string }): Promise<boolean> { return this.SoapRequestWithBodyNoResponse<typeof input>('CommitLearnedIRCodes', input); }
  GetIRRepeaterState(): Promise<GetIRRepeaterStateResponse> { return this.SoapRequest<GetIRRepeaterStateResponse>('GetIRRepeaterState'); }
  GetLEDFeedbackState(): Promise<GetLEDFeedbackStateResponse> { return this.SoapRequest<GetLEDFeedbackStateResponse>('GetLEDFeedbackState'); }
  IdentifyIRRemote(input: { Timeout: number }): Promise<boolean> { return this.SoapRequestWithBodyNoResponse<typeof input>('IdentifyIRRemote', input); }
  IsRemoteConfigured(): Promise<IsRemoteConfiguredResponse> { return this.SoapRequest<IsRemoteConfiguredResponse>('IsRemoteConfigured'); }
  LearnIRCode(input: { IRCode: string; Timeout: number }): Promise<boolean> { return this.SoapRequestWithBodyNoResponse<typeof input>('LearnIRCode', input); }
  SetIRRepeaterState(input: { DesiredIRRepeaterState: string }): Promise<boolean> { return this.SoapRequestWithBodyNoResponse<typeof input>('SetIRRepeaterState', input); }
  SetLEDFeedbackState(input: { LEDFeedbackState: string }): Promise<boolean> { return this.SoapRequestWithBodyNoResponse<typeof input>('SetLEDFeedbackState', input); }

  eventProperties(): {[key: string]: string} {
    throw new Error('No event properties in service definition')
  }
}

// Response classes
export interface GetIRRepeaterStateResponse {
  CurrentIRRepeaterState: string;
}

export interface GetLEDFeedbackStateResponse {
  LEDFeedbackState: string;
}

export interface IsRemoteConfiguredResponse {
  RemoteConfigured: boolean;
}
